name: Execução dos Testes

on:
  workflow_call:

jobs:
  unity-test:
    name: Teste de Unidade
    runs-on: ubuntu-latest
    steps:
      - name: Obtendo o código do projeto
        uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.300'

      - name: Execução do Teste de Unidade
        working-directory: ./src
        run: dotnet test ./Review-Filmes.Test.Unit/Review-Filmes.Test.Unit.csproj

  integration-test:
    name: Teste de Integração
    runs-on: ubuntu-latest
    services:
      postgre:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: review
          POSTGRES_PASSWORD: postgrespwd
          POSTGRES_DB: review-filmes
    steps:
      - name: Obtendo o código do projeto
        uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.300'

      - name: Execução do Teste de Integração
        working-directory: ./src
        run: dotnet test ./Review-Filmes.Test.Integration/Review-Filmes.Test.Integration.csproj
        env:
          ConnectionStrings_DefaultConnection: "Host=localhost;Port=5432;Database=review-filmes;Username=review;Password=postgrespwd"
  
  sonarqube:
    name: Scan com o SonarQube
    runs-on: ubuntu-latest
    steps:
      - name: Obtendo o código do projeto
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.300'
      
      - name: Instalação do SonarQube Scanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Build e Analise
        working-directory: ./src
        run: |
          dotnet sonarscanner begin /k:"filme" /d:sonar.host.url="${{ secret.SONAR_HOST_URL }}" /d:sonar.login="${{ secret.SONAR_TOKEN }}"
          dotnet build Review-Filmes.sln
          dotnet sonarscanner end /d:sonar.login="${{ secret.SONAR_TOKEN }}"

      - name: Verificação do Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        id: sonarqube-quality-gate-check
        env: 
          SONAR_TOKEN:  ${{ secret.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secret.SONAR_HOST_URL }}
        with:
          scanMetadataReportFile: ./src/.sonarqube/out/.sonar/report-task.txt
      
      - name: Exibir o status do Quality Gate
        if: ${{ always() }}
        run: echo "O Status do Quality Gate é ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"



